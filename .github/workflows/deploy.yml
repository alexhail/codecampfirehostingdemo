name: Deploy to DigitalOcean

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build
        env:
          NODE_ENV: production

      - name: Generate known hosts
        id: known_hosts
        run: |
          KNOWN_HOSTS=$(ssh-keyscan -H ${{ secrets.SERVER_IP }})
          echo "KNOWN_HOSTS<<EOF" >> $GITHUB_ENV
          echo "$KNOWN_HOSTS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ env.KNOWN_HOSTS }}
          if_key_exists: replace

      - name: Deploy to DigitalOcean
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
        run: |
          # Create a tarball of the dist directory
          tar -czf dist.tar.gz dist/
          
          # Ensure the deployment directory exists first
          ssh $SERVER_USER@$SERVER_IP "mkdir -p $DEPLOY_PATH"
          
          # Copy to server
          scp dist.tar.gz $SERVER_USER@$SERVER_IP:$DEPLOY_PATH/
          
          # Extract on server
          ssh $SERVER_USER@$SERVER_IP "cd $DEPLOY_PATH && tar -xzf dist.tar.gz && rm dist.tar.gz && echo 'Deployment completed successfully!'" 